{"meta":{"title":"Dwl's blog","subtitle":"记录生活中的点点滴滴","description":"","author":"Dwesome","url":"https://cool2feel.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-06-16T06:18:04.000Z","updated":"2020-06-16T06:17:23.829Z","comments":true,"path":"categories/index.html","permalink":"https://cool2feel.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-16T02:48:00.319Z","updated":"2020-06-16T02:48:00.319Z","comments":false,"path":"tags/index.html","permalink":"https://cool2feel.github.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-06-16T06:42:49.000Z","updated":"2020-06-16T06:42:49.723Z","comments":true,"path":"about/index.html","permalink":"https://cool2feel.github.io/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2020-06-16T06:43:56.000Z","updated":"2020-06-16T06:43:56.600Z","comments":true,"path":"archives/index.html","permalink":"https://cool2feel.github.io/archives/index.html","excerpt":"","text":""},{"title":"schedule","date":"2020-06-16T06:45:20.000Z","updated":"2020-06-16T06:45:20.419Z","comments":true,"path":"schedule/index.html","permalink":"https://cool2feel.github.io/schedule/index.html","excerpt":"","text":""}],"posts":[{"title":"Go简介","slug":"Go简介","date":"2020-06-16T03:48:40.657Z","updated":"2020-04-21T01:18:18.000Z","comments":true,"path":"2020/06/16/Go简介/","link":"","permalink":"https://cool2feel.github.io/2020/06/16/Go%E7%AE%80%E4%BB%8B/","excerpt":"","text":"一 Go语言介绍Go语言是Google公司开发的一种静态、编译型语言，具备自动垃圾回收功能，原生支持并发开发。 Go的诞生是为了解决当下编程语言对并发支持不友好、编译速度慢、编程复杂这三个主要问题。 Go既拥有接近静态编译语言（如C）的安全和性能，又有接近脚本语言（如python）的开发效率，其主要特点有： 天然并发：语言层面支持并发，包括gorotuine、channel 语法优势：没有历史包袱，包含多返回值、匿名函数、defer 语言层面支持多核CPU利用 与Java相比的不同： 没有Java支持的一些面向对象思想：重载、构造函数、继承等 代码规范严格：花括号位置固定，变量名大小写代表公有私有等 支持函数式编程：匿名函数，闭包 接口非侵入式：不需要显式声明对接口的继承，实现了接口的方法即为实现了该接口类型 二 Go安装推荐使用官方的安装包直接安装，下载地址：https://golang.org/dl/ 贴士：本笔记都是基于go1.13 Win安装Go：打开Win安装包下一步下一步即可，默认安装在目录：c:\\Go Mac安装Go：打开Mac安装包下一步下一步即可，需要预装Xcode。安装完毕后需配置环境变量即可使用，但是如果要使用一些go mod功能推荐如下配置： 1234567891011vim ~&#x2F;.bash_profileexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go # golang本身的安装位置export GOPATH&#x3D;~&#x2F;go&#x2F; # golang包的本地安装位置export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io # golang包的下载代理export GO111MODULE&#x3D;on # 开启go mod模式export PATH&#x3D;$PATH:$GOROOT&#x2F;bin # go本身二进制文件的环境变量export PATH&#x3D;$PATH:$GOPATH&#x2F;bin # go第三方二进制文件的环境便令# 重启环境source ~&#x2F;.bash_profile Linux安装Go： 123456789101112131415# 下载解压wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.13.1.linux-amd64.tar.gztar zxvf go*.tar.gz -C &#x2F;usr&#x2F;local&#x2F;# 配置环境：注意该环境必须是go1.11版本及以上且项目要求使用go mod才可以开启vim &#x2F;etc&#x2F;profileexport GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go # golang本身的安装位置export GOPATH&#x3D;~&#x2F;go # golang包的本地安装位置export GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct # golang包的下载代理,回源地址获取export GO111MODULE&#x3D;on # 开启go mod模式export PATH&#x3D;$PATH:$GOROOT&#x2F;bin # go本身二进制文件的环境变量export PATH&#x3D;$PATH:$GOPATH&#x2F;bin # go第三方二进制文件的环境便令# 重启环境source &#x2F;etc&#x2F;profile 测试安装： 12345# 查看go版本go version# 查看go环境配置go env 关于go modules的详细讲解位于本章12节。 三 HelloWorld新建文件hello.go，代码如下： 1234567package main //每个程序都有且仅有一个main包import \"fmt\" func main() &#123; //主函数main只有一个 fmt.Println(\"Hello World!\") //函数调用：包名.函数名&#125; 运行文件： 123456# 执行方式一：先编译，再运行go build hello.go # 编译。在同级目录下生成文件&#96;hello&#96;，添加参数&#96;-o 名称&#96; 则可指定生成的文件名 .&#x2F;hello # 运行。贴士：win下生成的是.exe文件，直接双击执行即可# 执行方式二：直接运行go run hello.go 两种执行流程的区别： 先编译方式：可执行文件可以在任意没有go环境的机器上运行，（因为go依赖被打包进了可执行文件） 直接执行方式：源码执行时，依赖于机器上的go环境，没有go环境无法直接运行 四 Go语法注意 Go源文件以 “go” 为扩展名 与Java、C语言类似，Go应用程序的执行入口也是main()函数 Go语言严格区分大小写 Go不需要分号结尾 Go编译是一行一行执行，所以不能将类似两个 Print 函数写在一行 Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过 Go的注释使用 // 或者 /* */ 五 开发工具推荐笔者推荐的go开发工具： goland vscode vscode的相关go插件会出现无法下载情况，解决办法： 12345678910111213141516171819202122# 如果开启了go mod，则 go get -u -v github.com&#x2F;ramya-rao-a&#x2F;go-outline go get -u -v github.com&#x2F;acroca&#x2F;go-symbols go get -u -v golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;guru go get -u -v golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;gorename go get -u -v github.com&#x2F;rogpeppe&#x2F;godef go get -u -v github.com&#x2F;sqs&#x2F;goreturns go get -u -v github.com&#x2F;cweill&#x2F;gotests&#x2F;gotests go get -u -v golang.org&#x2F;x&#x2F;lint&#x2F;golint# 如果未开启go mod，则需要进入cd $GOPATH&#x2F;src ，使用 git clone 下载上述文件 # 安装cd $GOPATH go install github.com&#x2F;ramya-rao-a&#x2F;go-outline go install github.com&#x2F;acroca&#x2F;go-symbols go install golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;guru go install golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;gorename go install github.com&#x2F;rogpeppe&#x2F;godef go install github.com&#x2F;sqs&#x2F;goreturns go install github.com&#x2F;cweill&#x2F;gotests&#x2F;gotests go install golang.org&#x2F;x&#x2F;lint&#x2F;golint","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-05-21T03:13:31.103Z","updated":"2020-05-21T03:13:31.104Z","comments":true,"path":"2020/05/21/hello-world/","link":"","permalink":"https://cool2feel.github.io/2020/05/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}